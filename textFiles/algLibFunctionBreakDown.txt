*** ChatGPT summary of algLib.py functions ***
THIS IS MISSING addInteraction
also now missing visualizeGraph

1. **`getNodesFromDB()`**: Connects to the SQLite database, fetches data from the `applicant_pool` table, creates a dictionary mapping user IDs to `Applicant` objects, and returns this dictionary.

2. **`getEdgesFromDB()`**: Connects to the SQLite database, fetches data from the `interactions_table` table, creates a dictionary mapping edge weights to pairs of user IDs, and returns this dictionary.

3. **`getStatisticsFromDB()`**: Connects to the SQLite database, fetches data from the `statistics` table, creates a dictionary mapping user IDs to their statistics (offer reception rate, offer bestowal rate, Tindar index), and returns this dictionary.

4. **`buildSelfID_GraphFromDB(selfID)`**: Constructs a directed graph (`nx.DiGraph`) based on data from the database. It adds nodes representing applicants and edges representing interactions involving the specified `selfID`. Returns the constructed graph.

5. **`buildWholeGraphFromDB()`**: Constructs a directed graph (`nx.DiGraph`) based on data from the database. It adds nodes representing applicants and adds all edges from the interactions table. Returns the constructed graph.

6. **`createApplicantTable()`**: Creates the `applicant_pool` table in the database if it doesn't already exist.

7. **`createEdgeTable()`**: Creates the `interactions_table` table in the database if it doesn't already exist.

8. **`addApplicantToDB(a)`**: Inserts an applicant (`Applicant` object) into the `applicant_pool` table in the database.

9. **`addInteractionToDB(a_userID, b_userID, weight)`**: Inserts an interaction (edge) between two users into the `interactions_table` table in the database.

10. **`addInteractionToGraph(G, a_userID, b_userID, edge_weight)`**: Adds an interaction (edge) between two users to a given graph `G`.

11. **`calcOfferReceptionRate(G, selfID)`**: Calculates the offer reception rate for a specified user based on incoming edges in the graph.

12. **`calcOfferBestowalRate(G, selfID)`**: Calculates the offer bestowal rate for a specified user based on outgoing edges in the graph.

13. **`calcTindarIndex(GPA, ricePurityScore)`**: Calculates the Tindar index based on the applicant's GPA and rice purity score.

14. **`addTindarIndexToDB(userID, tindarIndex)`**: Inserts a Tindar index value for a user into the `statistics` table in the database.

15. **`fetchTindarIndex(userID)`**: Fetches the Tindar index for a specified user from the `statistics` table in the database.

16. **`calcApplicantStatistics(G, selfID)`**: Calculates and updates the offer reception rate and offer bestowal rate for a specified user in the `statistics` table in the database.

17. **`writeApplicantStatistics(filepath)`**: Writes applicant statistics (offer reception rate, offer bestowal rate, Tindar index) from the `statistics` table into a text file at the specified filepath.

These functions collectively manage interactions between applicants, store applicant data, calculate statistics, and visualize graphs based on database data.